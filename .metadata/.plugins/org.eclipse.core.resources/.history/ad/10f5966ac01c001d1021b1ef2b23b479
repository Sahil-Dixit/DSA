package seaching_sorting_algorithms;

public class PeakElement {

	public static int peakElement(int[] arr, int n) {
		int start = 0;
		int end = n - 1;
		// if single integer input
		if (n == 1) {
			return 0;
		}
		while (start <= end) {
			int mid = start + (end - start) / 2;
			if (mid > 0 && mid < n - 1) {
				if (arr[mid] > arr[mid + 1] && arr[mid] > arr[mid - 1]) {
					return mid;
				} else if (arr[mid] > arr[mid - 1]) {
					start = mid + 1;
				} else {
					end = mid - 1;
				}
			} else if (mid == 0) {
				if (arr[mid] > arr[mid + 1]) {
					return mid;
				} else {
					return 1;
				}
			} else if (mid == n - 1) {
				if (arr[mid] > arr[mid - 1]) {
					return mid;
				} else {
					return n - 2;
				}
			}
		}
		return -1;
	}

	public static void main(String[] args) {
		int[] nums = { 5, 10, 20, 15 };
		System.out.println(peakElement(nums, nums.length));
	}

}
